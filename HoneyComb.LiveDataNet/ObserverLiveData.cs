using System;

namespace HoneyComb.LiveDataNet
{
    /// <summary>
    /// Internal <see cref="LiveData{TEventArgs}"/> implementation
    /// that implements <see cref="IObserver{TEventArgs}"/>
    /// and observes a <see cref="IObservable{TEventArgs}"/>.
    /// </summary>
    /// <typeparam name="TEventArgs">The type of the event data generated by the observable.</typeparam>
    internal class ObserverLiveData<TData> : LiveData<TData>, IObserver<TData>
    {
        private readonly IDisposable subscription;

        public ObserverLiveData(IObservable<TData> observable)
        {
            subscription = observable.Subscribe(this);
        }

        public override void Dispose()
        {
            base.Dispose();
            subscription.Dispose();
        }

        void IObserver<TData>.OnCompleted() => Dispose();

        void IObserver<TData>.OnError(Exception error)
        {
        }

        void IObserver<TData>.OnNext(TData value) => Value = value;
    }
}